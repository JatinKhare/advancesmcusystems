#
# This is an example Makefile for a countwords program.  This
# program uses both the scanner module and a counter module.
# Typing 'make' or 'make count' will create the executable file.
#

# define some Makefile variables for the compiler and compiler flags
# to use Makefile variables later in the Makefile: $()
#
#  -g    adds debugging information to the executable file
#  -Wall turns on most, but not all, compiler warnings
#
# for C++ define  CC = g++
CC = gcc
CFLAGS  = -g -Wall

# typing 'make' will invoke the first target entry in the file 
# (in this case the default target entry)
# you can name this target entry anything, but "default" or "all"
# are the most commonly used names by convention
#
default: count

# To create the executable file count we need the object files
# test1.o, test2.o, and test3.o:
#
count:  test1.o test2.o test3.o 
	$(CC) $(CFLAGS) -o count test1.o test2.o test3.o

# To create the object file test1.o, we need the source
# files test1.c, scanner.h, and counter.h:
#
test1.o:  test1.c scanner.h 
	$(CC) $(CFLAGS) -c test1.c

# To create the object file test2.o, we need the source files
# test2.c and counter.h:
#
test2.o:  test2.c 
	$(CC) $(CFLAGS) -c test2.c

# To create the object file test3.o, we need the source files
# test3.c and scanner.h:
#
test3.o:  test3.c 
	$(CC) $(CFLAGS) -c test3.c

# To start over from scratch, type 'make clean'.  This
# removes the executable file, as well as old .o object
# files and *~ backup files:
#
clean: 
	$(RM) count *.o *~

