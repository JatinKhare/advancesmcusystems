#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <stdint.h>
#include <fcntl.h>
#include <termios.h>
#include <sys/mman.h>
#include <sys/time.h>
#include <time.h>

#define BRAM_ADD            0xA0028000
#define MAP_SIZE 	    4096UL
#define MAP_MASK	    (MAP_SIZE - 1)
		
int main(int argc, char *argv[]) {

    volatile unsigned int *address;
    unsigned int value[6]; 

    int dh = open("/dev/mem", O_RDWR | O_SYNC); // Open /dev/mem which represents the whole physical memory
    
    if(dh == -1){
	    printf("Unable to open /dev/mem. Ensure if it exists.\n");
	    return -1;
    }

    if(argc>3){
	    printf("USAGE: ./test1 (yy words) (xx loops) \n");
	    return -1;
    }


    int xx = 10;   //default value of number of loops to run
    int yy = 5;   //default value of number of words to test per loop

    if(argc == 2){
	    yy = strtoul(argv[1], 0, 0);   //taking number of words from the user
            printf("Changing the words/loop to yy = %d \n", yy);
    }
    if(argc == 3){ 
	    yy = strtoul(argv[1], 0, 0);   //taking number of words from the user
	    xx = strtoul(argv[2], 0, 0);   //taking number of loops from the user
            printf("Changing the number of loops to xx = %d\n", xx);
            printf("Changing the words/loop to yy = %d\n", yy);
    }

    //Generating random data and address
    int data[yy];
    


    for(int i = 0; i < yy; i++){
	    data[i] = randn(4096);
    }	    

    for(int i = 0; i < yy; i++){
	    print("Data generated: %d\n", data[i]);
    }	    







    uint32_t* BRAM_virtual_address = mmap(NULL, 
                                          4096, 
                                          PROT_READ | PROT_WRITE, 
                                          MAP_SHARED, 
                                          dh, 
                                          BRAM_ADD & ~MAP_MASK); // Memory map AXI Lite register block
    printf("memory writing\n");  
    int offset = 0;
    for(int i = 0; i < 6; i++){

	    printf("Writing at: 0x%.8x", BRAM_ADD + offset);
	    address = BRAM_virtual_address + (((BRAM_ADD + offset) & MAP_MASK) >>2);
            value[i] = 7;
	    printf(", the data %d, ", value[i]);
	    *address = value[i];
	    printf("Written: %d\n", *address);
	    offset = i + 4;
	    
    }

    offset = 0;
    for(int i=0; i<6; i++)
    {
	unsigned int *reading_address = BRAM_virtual_address + (((BRAM_ADD + offset) & MAP_MASK) >>2);
        if(*reading_address != value[i])
        {
            printf("BRAM result = %d, random value written = %d at offset = %d\n", *reading_address, value[i], i);
            printf("test failed!!\n");
            munmap(BRAM_virtual_address,4096);
            return -1;
        }
	offset = i + 4;
    }
    printf("test passed!!\n");
    munmap(BRAM_virtual_address,4096);
    return 0;
}
